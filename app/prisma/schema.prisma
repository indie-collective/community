generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Entity {
  id            String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @updatedAt

  name          String
  type          entityType    @default(studio)
  about         String?
  site          String?

  logo          Image?          @relation(fields: [logoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  logoId        String?         @db.Uuid

  location      Location?       @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locationId    String?         @db.Uuid

  games         Game[]
  events        Event[]
  members       User[]
}

model Game {
  id            String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @updatedAt

  name          String
  about         String?
  site          String?

  authors       Entity[]
  tags          Tag[]
  events        Event[]
  images        Image[]
}


model Event {
  id            String          @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt     DateTime?       @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?       @updatedAt

  name          String
  about         String?
  site          String?
  start         DateTime        @db.Timestamptz(6)
  end           DateTime        @db.Timestamptz(6)
  status        eventStatus     @default(ongoing)

  location      Location?       @relation(fields: [locationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locationId    String?         @db.Uuid

  cover         Image?          @relation(fields: [coverId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  coverId       String?         @db.Uuid

  organisers    Entity[]
  participants  User[]
  games         Game[]
}

model Image {
  id               String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?    @updatedAt
  file             Json
  entities         Entity[]
  games            Game[]
  events           Event[]
  users            User[]
}

model Location {
  id               String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  updatedAt        DateTime?    @updatedAt

  city             String
  latitude         Float?
  longitude        Float?
  street           String?
  countryCode      String       @db.Char(2)
  region           String

  entities         Entity[]
  events           Event[]

  @@unique([street, city, region, countryCode, latitude, longitude])
}

model User {
  id               String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?    @updatedAt

  firstName        String
  lastName         String?
  about            String?

  avatar           Image?       @relation(fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  avatarId         String?      @db.Uuid

  entities         Entity[]
  events           Event[]
}

model Tag {
  id               String       @id @default(dbgenerated("public.uuid_generate_v4()")) @db.Uuid
  createdAt        DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime?    @updatedAt

  name             String       @unique @db.VarChar(30)

  games            Game[]
}

enum entityType {
  studio
  association
}

enum eventStatus {
  ongoing
  canceled
}
